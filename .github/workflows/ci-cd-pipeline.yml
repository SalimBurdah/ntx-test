name: CI/CD Pipeline for Docker to EC2

on:
  push:
    branches:
      - main  # Trigger pipeline ketika ada push ke branch main
  pull_request:
    branches:
      - main  # Trigger pipeline saat pull request dibuat ke branch main

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout kode
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Login ke Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker image
      - name: Build Docker image
        uses: salimburdah/ntx-app
        with:
          context: .
          push: true  # Jangan push dulu, hanya build
          tags: ${{ secrets.DOCKER_IMAGE_NAME }}:latest

      # # Step 5: Run tests (Opsional, jika Anda punya test)
      # - name: Run tests (Optional)
      #   run: |
      #     docker run --rm ${{ secrets.DOCKER_IMAGE_NAME }}:latest npm test

  cd:
    runs-on: ubuntu-latest
    needs: ci  # Hanya dijalankan setelah job ci selesai

    steps:
      # Step 6: Setup SSH untuk EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      # Step 7: Pull image dari Docker Hub ke EC2 dan jalankan
      - name: SSH to EC2 and Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_1 }} << 'EOF'
            # Pull Docker image terbaru
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:latest

            # Hentikan dan hapus container lama (jika ada)
            docker stop your-container-name || true
            docker rm your-container-name || true

            # Jalankan container baru
            docker run -d --name your-container-name -p 3000:3000 ${{ secrets.DOCKER_IMAGE_NAME }}:latest
          EOF

      - name: SSH to EC2 Instance 2 and Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_2 }} << 'EOF'
            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:$GITHUB_SHA

            # Stop and remove the old container (if exists)
            docker stop your-container-name || true
            docker rm your-container-name || true

            # Run the new container
            docker run -d --name your-container-name -p 3000:3000 ${{ secrets.DOCKER_IMAGE_NAME }}:$GITHUB_SHA
          EOF